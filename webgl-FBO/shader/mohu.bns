attribute vec2 inPos;

void main() 
{
    gl_Position = vec4(inPos, 0.0, 1.0);
}
<#BREAK_BN#>
precision mediump float;
uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iTime;                 // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform sampler2D iChannel0;          // input channel. XX = 2D/Cube
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
	if(uv.x <= iMouse.x / iResolution.x)
    	fragColor = texture(iChannel1, uv);
    else
    	fragColor = texture(iChannel0, uv);
}

void main() 
{
    vec4 color = vec4(0.0,0.0,0.0,1.0);
    mainImage( color, gl_FragCoord.xy );
    color.w = 1.0;
    if(gl_FragColor.w<0.0) color=vec4(1.0,0.0,0.0,1.0);
    if(gl_FragColor.x<0.0) color=vec4(1.0,0.0,0.0,1.0);
    if(gl_FragColor.y<0.0) color=vec4(0.0,1.0,0.0,1.0);
    if(gl_FragColor.z<0.0) color=vec4(0.0,0.0,1.0,1.0);
    if(gl_FragColor.w<0.0) color=vec4(1.0,1.0,0.0,1.0);
    gl_FragColor = vec4(color.xyz,1.0);
}